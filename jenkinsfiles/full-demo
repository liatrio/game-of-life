#!/bin/env groovy
pipeline {
    agent none
    environment {
        IMAGE = "liatrio/game-of-life-tomcat"
    }
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'maven:3.5.0'
                    args '-e INITIAL_ADMIN_USER -e INITIAL_ADMIN_PASSWORD --network=${LDOP_NETWORK_NAME}'
                }
            }
            steps {
                configFileProvider(
                    [configFile(fileId: 'nexus', variable: 'MAVEN_SETTINGS')]) {
                    sh 'mvn -s $MAVEN_SETTINGS clean deploy -DskipTests=true -B'
                }
            }
        }
        stage('Sonar') {
            agent  {
                docker {
                    image 'sebp/sonar-runner'
                    args '-e SONAR_ACCOUNT_LOGIN -e SONAR_ACCOUNT_PASSWORD -e SONAR_DB_URL -e SONAR_DB_LOGIN -e SONAR_DB_PASSWORD --network=${LDOP_NETWORK_NAME}'
                }
            }
            steps {
                sh '/opt/sonar-runner-2.4/bin/sonar-runner -e -D sonar.login=${SONAR_ACCOUNT_LOGIN} -D sonar.password=${SONAR_ACCOUNT_PASSWORD} -D sonar.jdbc.url=${SONAR_DB_URL} -D sonar.jdbc.username=${SONAR_DB_LOGIN} -D sonar.jdbc.password=${SONAR_DB_PASSWORD}'
            }
        }
        stage('Get Artifact') {
            agent {
                docker {
                    image 'maven:3.5.0'
                    args '-e INITIAL_ADMIN_USER -e INITIAL_ADMIN_PASSWORD --network=${LDOP_NETWORK_NAME}'
                }
            }
            steps {
                sh 'mvn clean'
                script {
                    pom = readMavenPom file: 'pom.xml'
                    getArtifact(pom.groupId, pom.artifactId + "-web", pom.version, "gameoflife")
                }
            }
        }
        stage('Build container') {
            agent any
            steps {
                script {
                    sh "docker build -t liatrio/game-of-life-tomcat:${env.BRANCH_NAME} ."
                    if ( env.BRANCH_NAME == 'master' ) {
                        pom = readMavenPom file: 'pom.xml'
                        containerVersion = pom.version
                        sh "docker build -t liatrio/game-of-life-tomcat:${containerVersion} ."
                    }
                }
            }
        }
        stage('Run local container') {
            agent any
            steps {
                sh 'docker rm -f game-of-life-tomcat-temp || true'
                sh "docker run -d --network=${LDOP_NETWORK_NAME} --name game-of-life-tomcat-temp liatrio/game-of-life-tomcat:${env.BRANCH_NAME}"
            }
        }
        stage('Stop local container') {
            agent any
            steps {
                sh 'docker rm -f game-of-life-tomcat-temp || true'
            }
        }
        stage('Push to dockerhub') {
            agent any
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'dockerPassword', usernameVariable: 'dockerUsername')]) {
                    script {
                        sh "docker login -u ${env.dockerUsername} -p ${env.dockerPassword}"
                        if ( env.BRANCH_NAME == 'master' ) {
                            sh "docker push liatrio/game-of-life-tomcat:${containerVersion}"
                        }
                        else {
                            sh "docker push liatrio/game-of-life-tomcat:${env.BRANCH_NAME}"
                        }
                    }
                }
            }
        }
        stage('Deploy to dev') {
            agent any
            steps {
                script {
                    if ( env.BRANCH_NAME == 'master' ) {
                        deployToEnvironment("ec2-user", "dev-petclinic.liatr.io", "petclinic-deploy-key", "${env.IMAGE}", "${containerVersion}", "game-of-life", "dev-petclinic.liatr.io")
                    }
                    else {
                        deployToEnvironment("ec2-user", "dev-petclinic.liatr.io", "petclinic-deploy-key", "${env.IMAGE}", "${env.BRANCH_NAME}", "game-of-life", "dev-petclinic.liatr.io")
                    }
                }
            }
        }
        stage('Smoke test dev') {
            agent { label 'master' }
            steps {
                sh "sleep 5s"
                sh "curl https://dev-petclinic.liatr.io/gameoflife"
                echo "Should be accessible at https://dev-petclinic.liatr.io/gameoflife"
            }
        }
        stage('Deploy to qa') {
            when {
                branch 'master'
            }
            agent any
            steps {
                deployToEnvironment("ec2-user", "qa-petclinic.liatr.io", "petclinic-deploy-key", "${env.IMAGE}", "${containerVersion}", "game-of-life", "qa-petclinic.liatr.io")
            }
        }
        stage('Smoke test qa') {
            agent { label 'master' }
            steps {
                sh "sleep 5s"
                sh "curl https://qa-petclinic.liatr.io/gameoflife"
                echo "Should be accessible at https://qa-petclinic.liatr.io/gameoflife"
            }
        }
        stage('Deploy to Prod') {
            when {
                branch 'master'
            }
            agent any
            steps {
                deployToEnvironment("ec2-user", "petclinic.liatr.io", "petclinic-deploy-key", "${env.IMAGE}", "${containerVersion}", "game-of-life", "petclinic.liatr.io")
            }
        }
        stage('Smoke test prod') {
            agent { label 'master' }
            steps {
                sh "sleep 5s"
                sh "curl https://prod-petclinic.liatr.io/gameoflife"
                echo "Should be accessible at https://prod-petclinic.liatr.io/gameoflife"
            }
        }
    }
}
